package kassaV2;
/**
 *@author SirNoolas - David Vonk
 */

import javax.swing.*;

import java.awt.event.*;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.io.*;
import java.util.Date;

public class ItemKassa extends JFrame{
	static String catalogus = "CATALOGUS.CHCFile";
	static String salesLog = "itemLog.CHCFile";
	
	JPanel thePanel, inputPanel, buttonPanel;
	JLabel inputLabel1, inputLabel2;
	JTextField indexField;
	JSpinner amountSpinner;
	JList listOfNamesOfItems;
	DefaultListModel namesOfItems = new DefaultListModel();
	JScrollPane scroller;
	JButton addCustomerButton, cancelButton;

	static String soldAmount;
	static double totalCalc;

	static Item soldItem;
	static Item[] sellableItems;

	public static void main(String[] args) {

		new ItemKassa();

	} // end of main

	public ItemKassa(){
		// read all item data from the file                
		sellableItems = getItemInfo();

		this.setSize(600, 650);
		this.setResizable(true);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setTitle("CHCSystems - Vooraden");

		thePanel = new JPanel();  

		// init Names of Items array
		for(int i = 0; i < sellableItems.length; i++){
			if(sellableItems[i].itemName.startsWith(" ")){
				namesOfItems.addElement(sellableItems[i].itemName + ":");
			}else{
				if(sellableItems[i].availableAmount == 999){
					namesOfItems.addElement((i) + ": " + sellableItems[i].itemName + "; Prijs: €" + sellableItems[i].itemPrice + "; Vooraad: (Bijna) ONEINDIG" );
				}else{
					namesOfItems.addElement((i) + (": ") + sellableItems[i].itemName + "; Prijs: €" + sellableItems[i].itemPrice + "; Vooraad (stuks): " + sellableItems[i].availableAmount);
				}

			}

		} // end of for
		listOfNamesOfItems = new JList(namesOfItems);
		listOfNamesOfItems.setVisibleRowCount(20);

		scroller = new JScrollPane(listOfNamesOfItems,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		listOfNamesOfItems.setFixedCellHeight(25);
		listOfNamesOfItems.setFixedCellWidth(550);

		thePanel.add(scroller);

		// init the input generators
		inputPanel = new JPanel();
		
		inputLabel1 = new JLabel("Item nummer: ", JLabel.CENTER);
		inputPanel.add(inputLabel1);

		indexField = new JTextField("Index", 4);
		indexField.requestFocus();
		indexField.selectAll();
		indexField.setToolTipText("Index: het getal dat aan het begin van een item staat");
		inputPanel.add(indexField);
		
		inputLabel2 = new JLabel("Hoeveelheid: ", JLabel.CENTER);
		inputPanel.add(inputLabel2);

		amountSpinner = new JSpinner(new SpinnerNumberModel(1, 1, 20, 1));
		amountSpinner.setToolTipText("Hoeveelheid items");
		inputPanel.add(amountSpinner);

		thePanel.add(inputPanel);

		buttonPanel = new JPanel();

		addCustomerButton = new JButton("Aankoop afronden");
		ListenForButton lForInfoGetButton = new ListenForButton();
		addCustomerButton.addActionListener(lForInfoGetButton);
		buttonPanel.add(addCustomerButton);

		cancelButton = new JButton("Annuleren");
		ListenForButton lForCancelButton = new ListenForButton();		
		cancelButton.addActionListener(lForCancelButton);
		buttonPanel.add(cancelButton);

		thePanel.add(buttonPanel);

		this.add(thePanel);
		this.setVisible(true);

	}

	private class ListenForButton implements ActionListener{

		public void actionPerformed(ActionEvent e){

			if(e.getSource() == addCustomerButton){
				try{
					soldItem = sellableItems[Integer.parseInt(indexField.getText())];
					totalCalc = getPrice();
					soldAmount = amountSpinner.getValue().toString();
					if(JOptionPane.showConfirmDialog(null, "Weet u zeker dat dit is wat de persoon heeft gekocht: " + soldItem.itemName + "; " + soldAmount + " stuk(s).", "Klopt dit?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0
							&& sellableItems[Integer.parseInt(indexField.getText())].availableAmount >= Integer.parseInt(soldAmount)){
						
						//decrement the available amount of item x
						sellableItems[Integer.parseInt(indexField.getText())].availableAmount -= Integer.parseInt(soldAmount);
						
						//write to log
						PrintWriter custOutput = createFile(salesLog, true);
						writeLog(custOutput);
						
						//write to Catalogus
						PrintWriter itemOutput = createFile(catalogus, false);
						//write to the file
						for(Item thing : sellableItems){
							createItems(thing, itemOutput);
						} // end of for

						itemOutput.close();
						
						JOptionPane.showMessageDialog(null, "De klant moet €" + totalCalc + " betalen.", "Betaling", JOptionPane.INFORMATION_MESSAGE);
						System.exit(0);
					}
				}catch(NumberFormatException b){
					JOptionPane.showMessageDialog(null, "Vul alstublieft de goede gegevens in!", "Invoer Fout!", JOptionPane.ERROR_MESSAGE);
				}

			}else if(e.getSource() == cancelButton){
				System.exit(0);
			}

		}
	}


	public double getPrice(){
		return (soldItem.itemPrice * Integer.parseInt(amountSpinner.getValue().toString()));
	}

	private static class Item{

		public String itemName;
		public double itemPrice;
		public int availableAmount;

		public Item(String itemName, double itemPrice, int availableAmount){

			this.itemName = itemName;
			this.itemPrice = itemPrice;
			this.availableAmount = availableAmount;

		} // end of constructor Item

	} // end of class Item

	// writing to the file
	
	private static void createItems(Item thing, PrintWriter itemOutput){

		String itemInfo = thing.itemName + " - " + Double.toString(thing.itemPrice) + " - " + Integer.toString(thing.availableAmount);

		itemOutput.println(itemInfo);

	} // end of function createItems
	

	private static PrintWriter createFile(String fileName, boolean isLog){

		File customerHistory = new File(fileName);

		try{

			PrintWriter infoToWrite = new PrintWriter(
					new BufferedWriter(
							new FileWriter(customerHistory, isLog)));
			return infoToWrite;

		}catch(IOException e){
			System.out.println("An I/O Error Ocurred");
			System.exit(0);

		} // end of try/catch

		return null;

	} // end of PrintWriter

	private static void writeLog(PrintWriter custOutput){
		String stringCustomerInfo = soldItem.itemName + " - " + soldAmount + " - " + Double.toString(totalCalc);

		Date date = new Date();

		custOutput.println(date + " - " + stringCustomerInfo);
		custOutput.close();

	}

	private static Item[] getItemInfo(){

		File catalog = new File(catalogus);

		try{
			BufferedReader getInfo = new BufferedReader(
					new FileReader(catalog));

			int expectedLines = 100;

			Item[] tempSellableItems = new Item[expectedLines];
			Item[] sellableItems = null;

			String[] itemInfo = getInfo.readLine().split(" - ");
			String tempItemInfo = "";

			for(int i = 0; i < expectedLines && itemInfo != null; i++){
				tempSellableItems[i] = new Item(itemInfo[0], Double.parseDouble(itemInfo[1]), Integer.parseInt(itemInfo[2]));
				tempItemInfo = getInfo.readLine();
				if(tempItemInfo != null){
					itemInfo = tempItemInfo.split(" - ");
				}else if(tempSellableItems[i + 1] == null){
					sellableItems = new Item[i+1];
					for(int x = 0; x <= i; x++){
						sellableItems[x] = tempSellableItems[x];
					}
					break;
				}
			}

			getInfo.close();


			return sellableItems;

		}catch(FileNotFoundException e){
			System.out.println("Couldn't Find File");
			System.exit(0);

		}catch(IOException e){
			System.out.println("An I/O Error Occured");
			System.exit(0);
		} // end of try/catch

		return null;
	} // end of class getItemInfo
}
